plugins {
    id 'maven-publish'
    id 'signing'
}

group = "ai.djl.mxnet"

def VERSION = "1.7.0-a"
boolean isRelease = project.hasProperty("release") || project.hasProperty("staging")
version = VERSION + (isRelease ? "" : "-SNAPSHOT")

sourceSets {
    main {
        // Don't include the resources folder with all the binaries in the placeholder jar,
        // javadoc jar, or sources jar
        resources {
            srcDirs = []
        }
    }
}

// Create a placeholder jar without classifier to pass sonatype tests but throws an Exception if loaded
jar {
    def versionName = String.format("${version}-%s", new Date().format('yyyyMMdd'))
    def placeholder = "${project.buildDir}/placeholder"
    def dir = file("${placeholder}/native/lib")
    dir.mkdirs();
    def propFile = file("${placeholder}/native/lib/mxnet.properties")
    propFile.text = "placeholder=true\nversion=${versionName}\n"

    from placeholder
}

java {
    withJavadocJar()
    withSourcesJar()
}

project.tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

signing {
    required(project.hasProperty("staging") || project.hasProperty("snapshot"))
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

def BINARY_ROOT = "${project.buildDir}/download"
def flavorNames = file(BINARY_ROOT).list() ?: []
flavorNames.each { flavor ->

    def platformNames = file("${BINARY_ROOT}/${flavor}").list() ?: []

    def artifactsNames = []

    platformNames.each { osName ->
        tasks.create(name: "${flavor}-${osName}Jar", type: Jar) {
            doFirst {
                def propFile = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/mxnet.properties")
                propFile.delete()
                def dsStore = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/.DS_Store")
                dsStore.delete()

                def versionName = String.format("${version}-%s", new Date().format('yyyyMMdd'))
                def dir = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib")
                def sb = new StringBuilder()
                sb.append("version=${versionName}\nclassifier=${flavor}-${osName}-x86_64\nlibraries=")
                def first = true
                for (String name : dir.list().sort()) {
                    if (first) {
                        first = false;
                    } else {
                        sb.append(',')
                    }
                    sb.append(name)
                }
                propFile.text = sb.toString()
                def metaInf = new File("${BINARY_ROOT}/${flavor}/${osName}/META-INF")
                metaInf.mkdirs()
                def licenseFile = new File(metaInf, "LICENSE")
                licenseFile.text = new URL("https://raw.githubusercontent.com/apache/incubator-mxnet/master/LICENSE").text

                def binaryLicenseFile = new File(metaInf, "LICENSE.binary.dependencies")
                binaryLicenseFile.text = new URL("https://raw.githubusercontent.com/apache/incubator-mxnet/master/tools/dependencies/LICENSE.binary.dependencies").text
            }
            from file("${BINARY_ROOT}/${flavor}/${osName}")
            archiveClassifier = "${osName}-x86_64"
        }
        artifactsNames.add(tasks["${flavor}-${osName}Jar"])
    }

    // Only publish if the project directory equals the current directory
    // This means that publishing from the main project does not publish the native jars
    // and the native jars have to be published separately
    if (project.getProjectDir().toString() == System.getProperty("user.dir")) {
        publishing.publications.create("${flavor}", MavenPublication) {
            artifactId "mxnet-native-${flavor}"
            from components.java
            artifacts = artifactsNames
            artifact jar
            artifact javadocJar
            artifact sourcesJar
            pom {
                name = "MXNet native library"
                description = "MXNet Engine native library binary distribution"
                url = "http://www.djl.ai/mxnet/native"
                packaging = "jar"

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                scm {
                    connection = "scm:git:git@github.com:awslabs/djl.git"
                    developerConnection = "scm:git:git@github.com:awslabs/djl.git"
                    url = "https://github.com/awslabs/djl"
                    tag = "HEAD"
                }

                developers {
                    developer {
                        name = "DJL.AI Team"
                        email = "djl-dev@amazon.com"
                        organization = "Amazon AI"
                        organizationUrl = "https://amazon.com"
                    }
                }
            }
        }
    }
}

publishing.repositories {
    maven {
        if (project.hasProperty("snapshot")) {
            name = "snapshot"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else if (project.hasProperty("staging")) {
            name = "staging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else {
            name = "local"
            url = "build/repo"
        }
    }
}

import java.util.zip.GZIPInputStream

task downloadMxnetNativeLib() {
    doLast {
        def url = "https://djl-ai.s3.amazonaws.com/publish/mxnet-${VERSION}"
        def files = [
                "linux/common/libgfortran.so.3.gz": "mkl/linux/native/lib/libgfortran.so.3",
                "linux/common/libgomp.so.1.gz"    : "mkl/linux/native/lib/libgomp.so.1",
                "linux/common/libquadmath.so.0.gz": "mkl/linux/native/lib/libquadmath.so.0",
                "linux/mkl/libmxnet.so.gz"        : "mkl/linux/native/lib/libmxnet.so",
                "linux/cu92mkl/libmxnet.so.gz"    : "cu92mkl/linux/native/lib/libmxnet.so",
                "linux/cu101mkl/libmxnet.so.gz"   : "cu101mkl/linux/native/lib/libmxnet.so",
                "linux/cu102mkl/libmxnet.so.gz"   : "cu102mkl/linux/native/lib/libmxnet.so",
                "osx/mkl/libmxnet.dylib.gz"       : "mkl/osx/native/lib/libmxnet.dylib",
                "win/common/libgcc_s_seh-1.dll.gz": "mkl/win/native/lib/libgcc_s_seh-1.dll",
                "win/common/libgfortran-3.dll.gz" : "mkl/win/native/lib/libgfortran-3.dll",
                "win/common/libopenblas.dll.gz"   : "mkl/win/native/lib/libopenblas.dll",
                "win/common/libquadmath-0.dll.gz" : "mkl/win/native/lib/libquadmath-0.dll",
                "win/mkl/libmxnet.dll.gz"         : "mkl/win/native/lib/mxnet.dll",
                "win/cu92mkl/libmxnet.dll.gz"     : "cu92mkl/win/native/lib/mxnet.dll",
                "win/cu101mkl/libmxnet.dll.gz"    : "cu101mkl/win/native/lib/mxnet.dll",
                "win/cu102mkl/libmxnet.dll.gz"    : "cu102mkl/win/native/lib/mxnet.dll"
        ]

        files.each { entry ->
            project.logger.lifecycle("Downloaing ${url}/${entry.key}")
            def file = new File("${BINARY_ROOT}/${entry.value}")
            file.getParentFile().mkdirs()
            new URL("${url}/${entry.key}").withInputStream { i -> file.withOutputStream { it << new GZIPInputStream(i) } }
        }

        copy {
            from("${BINARY_ROOT}/mkl/linux/native/lib") {
                exclude '**/libmxnet.so'
            }
            into("${BINARY_ROOT}/cu92mkl/linux/native/lib")
        }
        copy {
            from("${BINARY_ROOT}/mkl/linux/native/lib") {
                exclude '**/libmxnet.so'
            }
            into("${BINARY_ROOT}/cu101mkl/linux/native/lib")
        }
        copy {
            from("${BINARY_ROOT}/mkl/linux/native/lib") {
                exclude '**/libmxnet.so'
            }
            into("${BINARY_ROOT}/cu102mkl/linux/native/lib")
        }

        copy {
            from("${BINARY_ROOT}/mkl/win/native/lib") {
                exclude '**/mxnet.dll'
            }
            into("${BINARY_ROOT}/cu92mkl/win/native/lib")
        }
        copy {
            from("${BINARY_ROOT}/mkl/win/native/lib") {
                exclude '**/mxnet.dll'
            }
            into("${BINARY_ROOT}/cu101mkl/win/native/lib")
        }
        copy {
            from("${BINARY_ROOT}/mkl/win/native/lib") {
                exclude '**/mxnet.dll'
            }
            into("${BINARY_ROOT}/cu102mkl/win/native/lib")
        }
    }
}
