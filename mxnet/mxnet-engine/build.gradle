group "ai.djl.mxnet"

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    api "org.slf4j:slf4j-api:${slf4j_version}"
    api project(":api")

    testRuntimeOnly "ai.djl.mxnet:mxnet-native-mkl:1.7.0-a-SNAPSHOT"
    testImplementation project(":basicdataset")
    testImplementation project(":model-zoo")
    testImplementation project(":mxnet:mxnet-model-zoo")
    testImplementation(project(":integration")) {
        exclude group: "org.apache.logging.log4j", module: "log4j-slf4j-impl"
    }

    testImplementation("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }
    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
    testImplementation "org.powermock:powermock-module-testng:${powermock_version}"
    testImplementation "org.powermock:powermock-api-mockito2:${powermock_version}"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated-src']
        }
    }
}

checkstyleMain.source = 'src/main/java'
pmdMain.source = 'src/main/java'

task jnarator(dependsOn: ":mxnet:jnarator:jar") {
    doLast {
        File jnaGenerator = project(":mxnet:jnarator").jar.outputs.files.singleFile
        javaexec {
            main = "-jar"
            args = [
                    jnaGenerator.absolutePath,
                    "-l",
                    "mxnet",
                    "-p",
                    "ai.djl.mxnet.jna",
                    "-o",
                    "${project.buildDir}/generated-src",
                    "-m",
                    "${project.projectDir}/src/main/jna/mapping.properties",
                    "-f",
                    "src/main/include/mxnet/c_api.h",
                    "src/main/include/nnvm/c_api.h"
            ]
        }
    }
}

test {
    environment "PATH", "src/test/bin:${environment.PATH}"
}

import java.util.regex.Matcher
import java.util.regex.Pattern

def checkForUpdate(String path, String url) {
    def expected = new URL(url).text
    def actual = new File("${project.projectDir}/src/main/include/${path}").text
    if (!actual.equals(expected)) {
        def fileName = path.replaceAll("[/\\\\]", '_')
        file("${project.projectDir}/build").mkdirs()
        (file("${project.projectDir}/build/${fileName}")).text = expected
        logger.warn("[\033[31mWARN\033[0m ] Header file has been changed in open source project: ${path}.")
    }
}

task checkHeaderFile() {
    if (gradle.startParameter.offline) {
        logger.warn("[\033[31mWARN\033[0m ] Ignore header validation in offline mode.")
        return
    }

    def mxnetUrl = "https://raw.githubusercontent.com/apache/incubator-mxnet/master/"
    checkForUpdate("mxnet/c_api.h", "${mxnetUrl}/include/mxnet/c_api.h")
    def content = new URL("https://github.com/apache/incubator-mxnet/tree/master/3rdparty").text

    Pattern pattern = Pattern.compile("href=\"/apache/incubator-tvm/tree/([a-z0-9]+)\"")
    Matcher m = pattern.matcher(content);
    if (!m.find()) {
        throw new GradleException("Failed to retrieve submodule hash for tvm from github")
    }
    String hash = m.group(1);

    def nnvmUrl = "https://raw.githubusercontent.com/apache/incubator-tvm/${hash}"
    checkForUpdate("nnvm/c_api.h", "${nnvmUrl}/nnvm/include/nnvm/c_api.h")
}

compileJava.dependsOn(jnarator)

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "MXNet Engine Adapter"
                description = "MXNet Engine Adapter for DJL"
                url = "http://www.djl.ai/mxnet/${project.name}"
            }
        }
    }
}
